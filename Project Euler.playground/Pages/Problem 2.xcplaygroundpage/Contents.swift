import Foundation

/*
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 
 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 
 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */



func getArrayOfFibonacciNumbers(until target: Int) -> [Int] {
    var fibonacciNumbers: [Int] = []
    var currentNum: Int = 0
    var lastNum: Int = 0
    
    while currentNum < target {
        fibonacciNumbers.append(currentNum)
        
        if currentNum == 0 {
            currentNum = 1
        } else if lastNum == 0 {
            lastNum = 1
        } else {
            let nextNum = currentNum + lastNum
            lastNum = currentNum
            currentNum = nextNum
        }
    }
    return fibonacciNumbers
}

func totalEvenFibonacciNumbers(until target: Int) -> Int {
    var numbers = getArrayOfFibonacciNumbers(until: target)
    numbers = numbers.filter { $0 % 2 == 0 }
    let sum = numbers.reduce(0, +)
    
    return sum
}

print(totalEvenFibonacciNumbers(until: 4000000))
